Day 3 of 100: Notes
----------------------

Concepts Learned:
----------------------
- Conditionals:
  - If / Else
  - Elif
- Comparator Operators
- Modulo Operator
- Nesting
- Logical Operators:
  - and
  - or
  - not
- Multiple String Lines (''' ''')

----------------------

Key Terms & Explanations:
----------------------

if/else (Conditional Statements):
----------------------
- A conditional statement determines **what should happen based on a condition**.
- Syntax in Python:

    if condition:
        do this
    else:
        do this

- Example:

    if 5 > 2:
        print("Yes")
    else:
        print("No")

Indentation:
----------------------
- **Indentation is crucial in Python.**  
- Code inside an `if` statement **must** be indented.
- Example:

    if 5 > 2:  # This is a parent line of code
        print("Yes")  # This is a child line of code

Comparator Operators:
----------------------
- Used to **compare values**.
- List of comparison operators:
  - `>`  Greater than
  - `<`  Less than
  - `>=` Greater than or equal to
  - `<=` Less than or equal to
  - `==` Equal to
  - `!=` Not equal to

Modulo Operator:
----------------------
- The **modulo operator (%)** gives the remainder of a division.
- Examples:

    6 % 2  → 0  (6 is perfectly divisible by 2)
    6 % 5  → 1  (6 divided by 5 leaves remainder 1)
    6 % 4  → 2  (6 divided by 4 leaves remainder 2)

Nesting:
----------------------
- You can place **if/else** statements **inside other if/else** statements (this is called **nesting**).
- Example:

    if maths_score >= 90:
        if english_score >= 90:
            print("You're good at everything")
        else:
            print("You're good at maths")

    if english_score >= 90:
        print("You're good at English")

- In this case, **only** if both scores are above 90, the student gets **"You're good at everything"**.

elif (Extra Conditions):
----------------------
- `elif` allows for **multiple conditions**.
- Syntax:

    if condition1:
        do A
    elif condition2:
        do B
    else:
        do C

Multiple `if` Statements:
----------------------
- You can have multiple independent `if` statements checking different conditions.
- **Difference between if/elif/else, nested if, and multiple if statements:**

  1. **If/Elif/Else** → Only **one** condition runs.  
     Example:

        if condition1:
            do A
        elif condition2:
            do B
        else:
            do C

  2. **Nested If** → All conditions **must be true** for inner statements to execute.  
     Example:

        if condition1:
            do A
            if condition2:
                do B
                if condition3:
                    do C

  3. **Multiple Ifs** → Every condition is checked independently.  
     Example:

        if condition1:
            do A
        if condition2:
            do B
        if condition3:
            do C

    - In this case, **A, B, and C can all execute** regardless of each other.

Assignment Operator (`+=`):
----------------------
- **Used to increase a variable’s value and store the new value back**.
- Example:

    bill += 3  # Equivalent to bill = bill + 3

.lower() (String Method):
----------------------
- Converts all characters in a string to **lowercase**.
- Example:

    txt = "HELLO"
    x = txt.lower()
    print(x)  

  Output:

    hello

- Useful for **case-insensitive input checking**.
  Example:

    if add_extra_cheese.lower() == "y":
        bill = 10
    elif add_extra_cheese.lower() != "n":
        print("You typed the wrong input.")

Logical Operators:
----------------------
- **Used to combine conditions.**
- List of logical operators:
  - `A and B`  → Both conditions must be **True**.
  - `C or D`   → **At least one** condition must be **True**.
  - `not E`    → **The condition must be False**.

Multiple String Lines (`''' '''`):
----------------------
- **Using three single quotes (`'''`)** allows text to span **multiple lines**.
- Example:

    print('''
    This
    is
    a
    string
    ''')

Escape Character (`\`):
----------------------
- The **backslash (`\`)** is an escape character used to **prevent special characters from breaking the code**.
- Example:

    print("You\'re")

  Output:

    You're

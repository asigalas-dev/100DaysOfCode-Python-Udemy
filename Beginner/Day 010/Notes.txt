Day 10 of 100: Notes
----------------------

Concepts Learned:
----------------------
- Functions with Outputs
- Docstrings

----------------------

Key Terms & Explanations:
----------------------

Functions with Outputs:
----------------------
- We have already seen functions that **execute code** and functions with **inputs** that allow variation.
- Now, we explore **functions that return outputs**, which can be stored and reused.

- **Example: Function with an Output**

    def format_name(f_name, l_name):
        return f"{f_name.title()} {l_name.title()}"

    print(format_name("aNArgyRoS","sIGALAS"))

  Output:

    Anargyros Sigalas

- This function takes two inputs (`f_name`, `l_name`) and **returns** a formatted string.
- The `return` value is then passed to `print()` to display the output.

Return Keyword:
----------------------
- **`return`** is used to **exit a function** and send a **value** back.
- Any code **after `return` inside the function will not run**.

- **Example: Function using input**

    print(format_name(input("What is your first name? "), input("What is your last name? ")))

Title Case Formatting:
----------------------
- **`.title()`** → Formats a string to **title case** (capitalizing only the first letter of each word).

Stripping Extra Spaces:
----------------------
- **`.strip()`** → Removes spaces at the **beginning and end** of a string.

- **Example: Using `.strip()` with `.title()`**

    def format_name(f_name, l_name):
        return f"{f_name.strip().title()} {l_name.strip().title()}"

    print(format_name("      aNArgyRoS    ", "   sIGALAS   "))

  Output:

    Anargyros Sigalas

Print vs Return:
----------------------
- **`return`** → **Gives back a value** from a function that can be used elsewhere in the program.
- **`print()`** → **Only displays** the value in the console (useful for debugging).

Terminating with Return:
----------------------
- Functions **terminate** at the `return` keyword.
- Any **code after `return` will not be executed**.

- **Example: Exiting the function early**

    def format_name(f_name, l_name):
        if f_name == "" or l_name == "":
            return
        return f"{f_name.title()} {l_name.title()}"

    print(format_name(input("What is your first name? "), input("What is your last name? ")))

- If an **empty string** is provided, the function **exits early**.

Returning a Message Instead of an Empty Return:
----------------------
- Instead of returning **nothing**, return a **message** so the user knows what happened.

- **Example: Returning an error message**

    def format_name(f_name, l_name):
        if f_name == "" or l_name == "":
            return "You did not provide valid inputs"
        return f"{f_name.title()} {l_name.title()}"

Conditional Returns:
----------------------
- **Control flow inside functions** determines different execution paths, leading to multiple possible `return` values.

- **Example: Function with multiple return paths**

    def canBuyAlcohol(age):
        if age >= 18:
            return True
        else:
            return False

Removing Unnecessary Else:
----------------------
- Since `return` **exits the function**, an `else` is **not required**.

- **Example: Simplified function**

    def canBuyAlcohol(age):
        if age >= 18:
            return True
        return False

Docstrings:
----------------------
- **Docstrings** are used to write **multiline comments** that document a function.
- The docstring must be the **first line inside the function**.
- Use **three double quotes (`"""`)** for docstrings.

- **Example: Using a docstring**

    def function_name():
        """This is a note of documentation."""

Function as a Value:
----------------------
- A **function can be stored as a variable**.
- **Do not include parentheses (`()`)** when assigning it, or it will execute immediately.

- **Example: Storing a function in a variable**

    def add(n1, n2):
        return n1 + n2

    my_favourite_operation = add

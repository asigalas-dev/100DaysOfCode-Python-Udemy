Day 8 of 100: Notes
----------------------

Concepts Learned:
----------------------
- Functions with Inputs
- Arguments
- Parameters
- Multiple Inputs
- Positional Arguments
- Keyword Arguments
- List Index
- Using Modulo to Wrap Around a List When Out of Range

----------------------

Key Terms & Explanations:
----------------------

Function Inputs:
----------------------
- By adding a **variable name** inside the parentheses when defining a function, it allows that function to **accept inputs** when called.
- This lets us modify how the function behaves **each time** by passing in different inputs.

- Example:

    # Defining the function
    def myFunction(input):
        print(f"Hey! {input}")

    # Calling the function
    myFunction("Tommy")

  Output:

    Hey! Tommy

Parameter vs Argument:
----------------------
- **Parameter** → A **placeholder variable** inside the function definition that represents an expected input.
  - Example:

      def greet(name):  # "name" is the parameter

- **Argument** → The **actual value** provided when calling the function.
  - Example:

      greet("Angela")  # "Angela" is the argument

Multiple Inputs:
----------------------
- You can define a function with **multiple parameters**, separated by commas.

- Example:

    def greet_with(name, location):
        print(f"Hello {name}")
        print(f"What is it like in {location}?")

Positional Arguments:
----------------------
- By **default**, Python assigns arguments **based on the order** they are passed in.

- Example:

    def my_function(a, b):
        print(a)
        print(b)

    my_function(2, 1)

  Output:

    2
    1

- Since arguments are assigned **by position**, swapping them would change the result.

Keyword Arguments:
----------------------
- Instead of relying on position, **you can specify which argument corresponds to which parameter**.

- Example:

    def my_function(a, b):
        print(a)
        print(b)

    my_function(b=2, a=1)

  Output:

    1
    2

- This makes the function **more readable** and prevents confusion.

Using Modulo to Wrap Around a List When Out of Range:
----------------------
- The **modulo operator (`%`)** ensures an index **stays within** a list's bounds by **wrapping around** when it exceeds the list length.

- Example:

    alphabet = ['a', 'b', ..., 'z']
    index = alphabet.index('z')  # 25
    shift = 9
    index += shift
    index %= len(alphabet)  # Ensures it wraps around
    print(alphabet[index])  # 'i'

- **Concept:** Using `%= len(list)` ensures values stay **within the list range** by wrapping around when necessary.

Reversing the Sign of a Number:
----------------------
- Multiplying a number by `-1` reverses its sign.
- Example:

    5 * -1  # Becomes -5
    -10 * -1  # Becomes 10

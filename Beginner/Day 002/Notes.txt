Day 2 of 100: Notes

------------

Concepts learned:

Data Types
	- Strings
	- Integers
	- Floats
	- Booleans
Subscripting
Type Checking
Type Conversion (Type Casting in Python)
Mathematical Operations
Flooring a number
Rounding a number
Assignment Operators
f-strings
------------

Terms learned:

counting - in programming you always start counting from 0
[ ] - inside the square brackets we can put the index or position of a character that we want to pull
	an example can be 
print("hello"[0])
	which will print the character h
subscripting - the method of pulling a particular element from a string
negative indices - you can use counting backwards using negative numbers
	an example can be
print("hello"[-1])
	which will print the character o
" " - anything within quotations is considered by the code as a string
integers - whole numbers (numbers without any decimal places)
print(2+2) - you can write integers straight into your code without the need of calling their type
	in this case the system will print 4
large numbers - in case of large numbers you can separate them for YOUR ease with underscore _ in your code (instead of the traditional commas). That is only to help you make sense of a large number and it will not be translated into code. The code just ignores it.
	an example can be
print(123_456_789) instead of print(123456789)
	both will print the same
float (floating point number) - the number that has decimal places (3.14159). It is a float because the decimal point can occur at any point
boolean - this can only have two values True or False. They are written in capitals because they have to be used as such
len( ) - cannot accept integers
TypeError - this error occurs when you are using the wrong data type
type( ) - you can check the data type of any value or variable in python by using this function
	an example can be
print(type("abc"))
	which will give you <class 'str'> because it's a string
type conversion - you can convert data into different data types using special functions like int() or float() or str()
	not everything can be converted to a different data type and that's when you get a ValueError
	an example can be
print(int("abc")
	than cannot be done because abc is not a number
mathematical operations - basic mathematical operation of addition (+), substraction (-), multiplication (*) and division (/)
	of note - division always return a floating number by default by something called implicit typecasting, meaning that Python implicitly converts the result to a float
additional operators 
	- when you want your division to return an integer and not a float you can use (//). You should be mindful though because in a case of a float result of 1.6667 will return 1 
	- when you want to raise a number to a power you use (**) which is also called the exponent (for example 2**3 gives 8)
PEMDAS - the order of priority of operations
	Parentheses, Exponents, Multiplication/Division, Addition/Substraction
	- in cases of multiplication and division or addition and substraction, the calculation which is most to the left will be prioritised
flooring a number - you can floor a number or remove all decimal places using the int() function which converts a floating point number (with decimal places) into an integer (whole number)
	an example can be
int(3.738492) which will become 3
rounding a number - if you want to round a decimal number to the nearest whole number using the traditional mathematical way, where anything over .5 rounds up and anything below rounds down. Then you can use the python round() function
	an example can be
round(3.738492) which will become 4
round(3.14159) which will become 3
round() - the function can get two inputs. The first is the number you want to round and the second one is number of digits you want to round it to
	an example can be
round(3.14159, 2) which will become 3.14
assignment operators - assignment operators such as the addition assignment operator += will add the number on the right to the original value of the variable on the left and assign the new value to the variable
	an example can be
score = 0 if we are trying to keep a user score for example. Instead of doing score = score + 1 for every time they score a point, we can use score += 1 which will just add 1 to the original score
	other assignment operators are
	+= to add
	-= to substract
	*= to multiply
	/= to divide
these are quite usufull when you want to manipulate a value based on its previous value
f-strings - in Python, we can use f-strings to insert a variable or an expression into a string. It's an easy way of mixing strings and different data types
	an example can be
age = 35
print(f"I am {age} years old")
	which will ouput I am 35 years old
percentage calculation - in order to calculate a percentage of something you can multiply a number by the percentage number divided by 100. 
	an example can be
if you want to find the 10% of 100 would be
10% = 10 / 100 = 0.10
100 * 0.10 = 10
:.nf (where n is number) = this is a way to force decimal points to our float
	an example can be
split_amount = 55
print(f"Each person should pay: ${split_amount:.2f}")
	will return Each person should pay: $55.00
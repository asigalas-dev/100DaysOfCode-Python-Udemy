Day 2 of 100: Notes
----------------------

Concepts Learned:
----------------------
- Data Types:
  - Strings
  - Integers
  - Floats
  - Booleans
- Subscripting
- Type Checking
- Type Conversion (Type Casting in Python)
- Mathematical Operations
- Flooring a Number
- Rounding a Number
- Assignment Operators
- f-strings
- Forcing Decimal Points - Formatting

----------------------

Key Terms & Explanations:
----------------------

Counting in Programming:
----------------------
- In programming, counting **always starts from 0**.

Subscripting:
----------------------
- **[ ] (Square Brackets)** → Used to extract a specific character from a string.
- Example:

    print("hello"[0])

  Output:

    h

- **Subscripting** is the method of pulling a specific element from a string.

Negative Indices:
----------------------
- You can count **backwards** using negative numbers.
- Example:

    print("hello"[-1])

  Output:

    o

Data Types:
----------------------
- **" " (Strings)** → Anything enclosed in quotes is considered a string.
- **Integers** → Whole numbers (without decimal places).
- Example:

    print(2 + 2)

  Output:

    4

- **Large Numbers** → For readability, underscores `_` can be used instead of commas.
  Example:

    print(123_456_789)  

  This is the same as:

    print(123456789)

  Both will output:

    123456789

- **Floats (Floating Point Numbers)** → Numbers with decimal places.
  Example:

    print(3.14159) 

- **Booleans** → Can only be `True` or `False` (must be capitalized in Python).

Type Checking & Errors:
----------------------
- `len( )` **cannot** accept integers.
- **TypeError** → Occurs when using an incompatible data type.
- **type( )** → Used to check the data type of a variable or value.
  Example:

    print(type("abc"))

  Output:

    <class 'str'>

Type Conversion (Type Casting):
----------------------
- Converts data into different types (`int()`, `float()`, `str()`).
- Not all data can be converted (e.g., converting `"abc"` to an integer will cause a **ValueError**).
- Example:

    print(int("abc"))  # ❌ This will cause an error.

Mathematical Operations:
----------------------
- Basic Operations:
  - Addition: `+`
  - Subtraction: `-`
  - Multiplication: `*`
  - Division: `/` (Always returns a **float**)

- **Additional Operators:**
  - `//` → **Floor Division** (returns an integer, removing decimals)
  - `**` → **Exponentiation** (raising a number to a power)
  - Example:

      print(2 ** 3)

    Output:

      8

PEMDAS:
----------------------
- Order of operations in Python follows **PEMDAS**:
  - **P**arentheses
  - **E**xponents
  - **MD** Multiplication & Division (Left to Right)
  - **AS** Addition & Subtraction (Left to Right)

Flooring a Number:
----------------------
- Removes all decimal places and converts a float to an integer.
- Example:

    print(int(3.738492))

  Output:

    3

Rounding a Number:
----------------------
- Rounds decimals **up** if ≥ 0.5, **down** if < 0.5.
- Example:

    print(round(3.738492))  # Output: 4
    print(round(3.14159))   # Output: 3

- **Rounding to Specific Decimal Places:**
  - The `round()` function can accept a second argument to specify decimal places.
  - Example:

      print(round(3.14159, 2))

    Output:

      3.14

Assignment Operators:
----------------------
- Assignment operators update a variable’s value **based on its previous value**.
- Instead of:

    `score = score + 1`

  We can use:

    `score += 1`

- **Other Assignment Operators:**
  - `+=` → Adds a value
  - `-=` → Subtracts a value
  - `*=` → Multiplies a value
  - `/=` → Divides a value

f-strings:
----------------------
- Allows inserting variables into strings easily.
- Example:

    age = 35
    print(f"I am {age} years old")

  Output:

    I am 35 years old

Percentage Calculation:
----------------------
- To calculate a percentage of a number:

    Percentage = (percentage_value / 100) * total_value

- Example: **10% of 100**
  
    `10% = 10 / 100 = 0.10`
    
    `100 * 0.10 = 10`

Forcing Decimal Points (Formatting):
----------------------
- **`.nf` (where `n` is the number of decimal places)** forces a specific number of decimal points in a float.
- Example:

    split_amount = 55
    print(f"Each person should pay: ${split_amount:.2f}")

  Output:

    Each person should pay: $55.00

Day 4 of 100: Notes
----------------------

Concepts Learned:
----------------------
- Randomisation
- What is a Module
- Importing a Module
- Creating a Module
- Random Integer
- Random Float
- Lists

----------------------

Key Terms & Explanations:
----------------------

Randomisation:
----------------------
- A fundamental concept used when we want **unpredictability** in our programs or games.

Deterministic:
----------------------
- A term used for computer systems, meaning they **always produce predictable results** when given the same input.

Mersenne Twister:
----------------------
- The **pseudorandom number generator** that Python uses to generate random numbers.

Random Module:
----------------------
- **`random`** is a module in Python that helps us generate random numbers.
- Always check **Python documentation** for the latest features and usability.

Importing a Module:
----------------------
- Modules allow us to **organize code into separate files**.
- To import a module:

    import module_name

- Example:

    import random  # Imports the random module

What is a Module?
----------------------
- A **module** is a collection of Python functions that serve a specific purpose.
- Modules help keep **code organized and reusable**.

Using Functions from a Module:
----------------------
- To use a function from the `random` module:

    random.function_name()

- Example:

    random.randint(1, 10)  # Generates a random integer between 1 and 10.

Creating a Module:
----------------------
- You can create a custom module by:
  1. **Creating a new Python file**.
  2. **Importing it** in your main script.
  3. **Calling functions from it**.

- Example:

    import my_module
    my_module.my_function()

Random Integer:
----------------------
- `random.randint(a, b)` → Generates a **random integer** between `a` and `b` (inclusive).
- Example:

    print(random.randint(1, 10))  # Random integer between 1 and 10

Random Float:
----------------------
- `random.random()` → Generates a **random float** between **0.0 (inclusive)** and **1.0 (not inclusive)**.
- Example:

    print(random.random())  # Outputs a float between 0.0 and 1.0

- **Expanding the range**:
  - You can multiply `random.random()` by a number to scale the range.
  - Example:

      print(random.random() * 10)  # Outputs a float between 0.0 and 10.0

Random Float with Upper Bound:
----------------------
- `random.uniform(a, b)` → Generates a **random floating point number** between `a` and `b`.
- Example:

    print(random.uniform(1, 10))  # Random float between 1 and 10

- This function **may or may not include the upper bound** due to floating point rounding.

Lists:
----------------------
- A **list** is a **mutable (changeable), ordered sequence of elements** in Python.
- Lists are **defined using square brackets** `[ ]`.

- Example:

    my_list = [item1, item2]

- Items in a list **can be of any data type**.

List Order:
----------------------
- The **order of elements in a list matters**.
- Accessing list elements:
  - `list[0]` → Gets the **first item**.
  - `list[-1]` → Gets the **last item**.

Modifying a List:
----------------------
- Changing an item in a list:

    list[0] = "new_item"  # Replaces the first item

- **Appending** an item:

    list.append("new_item")  # Adds a new item to the end of the list

- **Extending** a list (adding multiple items):

    list.extend(["x1", "x2", "x3"])  # Adds multiple items at once

Selecting a Random Item from a List:
----------------------
- `random.choice(list_name)` → Selects a **random element from a list**.
- Example:

    items = ["apple", "banana", "cherry"]
    print(random.choice(items))  # Randomly picks one

Getting the Length of a List:
----------------------
- `len(list_name)` → Returns the **number of items in a list**.
- Can also be used for **counting characters in a string**.

Handling List Errors:
----------------------
- **IndexError** → Occurs when trying to access an item that **does not exist**.
- Example:

    my_list = ["apple", "banana"]
    print(my_list[3])  # ❌ IndexError because index 3 does not exist

Nested Lists (2D Lists):
----------------------
- A list **inside another list** is called a **nested list** or **2D list**.
- Example:

    fruits = ["Cherry", "Apple", "Pear"]
    veg = ["Cucumber", "Kale", "Spinach"]
    fruits_and_veg = [fruits, veg]

- Accessing elements in a **nested list**:
  - `fruits_and_veg[0]` → Returns the **first list** (`["Cherry", "Apple", "Pear"]`).
  - `fruits_and_veg[0][0]` → Returns **"Cherry"** (first item in the first list).


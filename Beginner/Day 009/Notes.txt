Day 9 of 100: Notes
----------------------

Concepts Learned:
----------------------
- Dictionaries
- Dictionary Nesting

----------------------

Key Terms & Explanations:
----------------------

Dictionary:
----------------------
- A **dictionary** in Python is a data structure that allows us to **associate keys with values**.
- It functions similarly to a real-life dictionary, where **each key has an associated definition (value)**.
- Dictionaries help **organize and tag related pieces of data**.

- **Structure of a Dictionary:**
  - Keys are on the **left**, values on the **right**.
  - Entries are enclosed in `{ }`.
  - **Format:** `{Key: Value}`
  - Multiple key-value pairs are separated by commas.

- Example:

    colours = {
        "apple": "red", 
        "pear": "green", 
        "banana": "yellow",
    }

- **Best Practices:**
  - Place **each key-value pair on a new line** for readability.
  - End each entry with a **comma**, even the last one (to allow easy modifications later).

Retrieving Items from a Dictionary:
----------------------
- To access a value, use **square brackets with the key name**.

- Example:

    print(colours["pear"])

  Output:

    green

Adding New Items to a Dictionary:
----------------------
- Assign a **new key-value pair**.

- Example:

    colours["peach"] = "pink"

Modifying Existing Values in a Dictionary:
----------------------
- Reassign the key to a **new value**.

- Example:

    colours["apple"] = "green"

Creating an Empty Dictionary:
----------------------
- You can create an empty dictionary **for later use**.

- Example:

    my_empty_dictionary = {}

- This can also be used to **wipe an existing dictionary**.

Looping Through a Dictionary:
----------------------
- **Print all keys:**

    for key in colours:
        print(key)

- **Print all values:**

    for key in colours:
        print(colours[key])

- **Print both keys and values on the same line:**

    for key in colours:
        print(f"{key}: {colours[key]}")

Nesting (Dictionaries Inside Dictionaries):
----------------------
- Nesting works like **folders inside folders**.
- You can **combine different data types** to create structured data.

- **Example: Nesting a List inside a Dictionary:**

    my_dictionary = {
        "key1": [List],
        "key2": {Value},
    }

- **Example: A dictionary with lists as values:**

    travel_log = {
        "France": ["Paris", "Lille", "Dijon"],
        "Germany": ["Stuttgart", "Berlin"],
        "Greece": ["Athens", "Santorini", "Syros"]
    }

- **Retrieving a specific value from a nested list:**

    print(travel_log["France"][1])  

  Output:

    Lille

Example of a 2D List:
----------------------
- **A list inside another list.**

- Example:

    nested_list = ["A", "B", ["C", "D"]]
    print(nested_list[2][1])

  Output:

    D

Day 6 of 100: Notes
----------------------

Concepts Learned:
----------------------
- Code Blocks
- Functions
- Loops:
  - While Loops
- Debugging

----------------------

Key Terms & Explanations:
----------------------

Functions:
----------------------
- A **function** is a named block of code that runs **only when called**.
- Functions help save time and reduce repeated code.

Defining a Function:
----------------------
- Use `def` to define a new function.
- Example:

    def my_function():
        print("Hello")

Calling a Function:
----------------------
- To run the function, type its name followed by parentheses.

    my_function()  # Calls the function and prints "Hello"

Code Blocks:
----------------------
- **Code blocks** in Python are defined by **indentation**.
- Proper indentation makes code readable and avoids errors.

While Loops:
----------------------
- A **while loop** runs as long as a condition is `True`.
- Syntax:

    while condition:
        # Do something repeatedly

- Example:

    while this_is_true:
        # Do something repeatedly

While Not Condition:
----------------------
- **`while not condition_name`** → The loop continues until the condition is met.
- Example:

    while not condition_name:
        # Keep looping

While Loops vs For Loops:
----------------------
- **For loops** → Best when iterating over a **sequence** (e.g., lists, ranges).
- Example:

    fruits = ["Apple", "Pear", "Orange"]
    for fruit in fruits:
        print(fruit)

  Output:

    Apple
    Pear
    Orange

- **While loops** → Best when the exact number of repetitions **is unknown**.
- Example:

    while condition:
        # Keep looping until condition becomes False

Infinite Loops:
----------------------
- **While loops** can lead to infinite loops if the condition **never becomes False**.
- Infinite loops happen when **the loop never stops running**.
- Be cautious to **always ensure the condition eventually becomes False**.
